plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.flutter_apps"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.flutter_apps"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            storeFile = file("keystore/release-key.jks") // Path to your keystore file
            storePassword = "davedavide271" // Example keystore password
            keyAlias = "flutter_app" // Example key alias
            keyPassword = "davedavide271" // Example key password
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                outputFileName = "TRANS_CO-${variant.versionName}.apk"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'packageRelease') {
        task.finalizedBy(renameApk)
    }
}

task renameApk {
    doLast {
        def releaseDir = file("$buildDir/outputs/flutter-apk")
        def oldFile = releaseDir.listFiles()?.find { it.name.endsWith(".apk") }
        if (oldFile) {
            def newFile = new File(releaseDir, "TRANS-CO-${flutterVersionName}.apk")
            if (oldFile.renameTo(newFile)) {
                println "APK renamed to ${newFile.name}"
            } else {
                println "Failed to rename APK file!"
            }
        } else {
            println "No APK file found to rename!"
        }
    }
}

flutter {
    source = "../.."
}
